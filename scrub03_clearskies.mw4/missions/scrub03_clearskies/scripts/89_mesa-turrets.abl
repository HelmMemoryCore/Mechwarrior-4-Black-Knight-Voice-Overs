
//*********************************************************************************

//The below line MUST be changed in order for the script to be considered
//a unique entity.  The word Turret must be changed to some other unique identifier
fsm Mesa_Turrets : integer;

// This is the generic script for turrets of all sorts.
// Memory integer 9 is reserved for settings in case multiple turret groups are using the same brain

// Behavior: The turret sits and shoots, and that's it.

//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
	const
		#include_ <content\ABLScripts\mwconst.abi>


//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
	type
		#include_ <content\ABLScripts\mwtype.abi>


//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
	static integer		attackrange; 		// At what range will I attack someone?
	static integer		gunnery;			// What is my chance to hit?
	static real			mindelay;			// minimum amount of time I will wait between shots
	static real			maxdelay;			// maximum amount of time I will wait between shots
	static integer 		elitelevel; 		// How smart am I?
												//Turrets do not use Elite Level to choose tactics.  However,
												//they do use Elite level to set up opportunity fire.
	static integer		isshotradius;  	    // How close must an enemy shot come to me before I notice it
	
	static ObjectID     mytower; 			// Tower which controls this turret.
												// -1 means I have no control tower
	
																																						
//SETTINGS IN MEMORY CELLS
//SP Turrets			=			0
//ml Cannon				=			2
//LRM Turrets			=			3
//------------------------------------------------------------------
//
//     Init Function    (automatically run first time through)
//
//------------------------------------------------------------------
function init;

	code

									// defaults are below
	attackrange     = 900;  		//350
	gunnery         = 30;			//30
	mindelay        = 1.0;			//1.0
	maxdelay        = 2.0;          //2.0
	elitelevel      = 30;           //30
	mytower         = -1;	       	//-1	(-1 means I have no control tower)
	isshotradius    = 40;		 	//40
	
	
	//Use this to set different values for different units using the same brain
	switch (GetMemoryInteger(me,9))

		case 0:
    		attackrange     = 900;	
    		gunnery         = 50;           // 80
    		mindelay        = 0.5;			// Used to be 0
    		maxdelay        = 1.0;          // .5
    		elitelevel      = 50;           // 80
    		mytower         = -1;				
            isshotradius    = 40;				
		endcase;

		case 1:
    		attackrange     = 900;	
    		gunnery         = 50;           // 80
    		mindelay        = 0.5;			// Used to be 0
    		maxdelay        = 1.0;          // .5
    		elitelevel      = 50;           // 80
    		mytower         = -1;				
            isshotradius    = 40;				
            mytower         = ebu_base_turret_tower;
		endcase;
	
	endswitch;

endfunction;

//------------------------------------------------------------------
//
//     Main Code
//
//------------------------------------------------------------------
state startState;

	code
		SetFiringDelay(me,mindelay,maxdelay);
		setignorefriendlyfire(me,true);
		setisshotradius(me,isshotradius);
		setskilllevel(me,-1,gunnery,elitelevel);
		//startexecute(me);
		//setalignment(me,enemy);
	
		trans look;

endstate;

state deadState;
	code
	  orderDie;
endstate;

//------------------------------------------------------------------
//
//     Sit state : description
//
//------------------------------------------------------------------
state look;
	var
		ObjectID foe;

	code
	
		OrderMoveLookout; 	


		//If I have a tower attached to me and that tower is destroyed
		// then go to the towergone state when my tower is destroyed
		if (mytower <> -1) then
			if (IsDead(mytower)) then
				trans towergone;
			endif;
		endif;

		//Find out if I should get into the attackstate
		if (setmytarget(attackrange)) then
			trans attack;
	 	endif;

		
endstate;

//------------------------------------------------------------------
//
//     attack state : description
//
//------------------------------------------------------------------
state attack;
	code

        firstspot = true;
			
		if (LeaveAttackState(attackrange)) then
			orderstopattacking;
			trans look;
		endif;
		
		//Go ahead, shoot the target.  You know you want to.
		orderAttack(TRUE);
				
		//If I have a tower attached to me and that tower is destroyed
		// then go to the towergone state when my tower is destroyed
		if (mytower <> -1) then
			if (IsDead(mytower)) then
				trans towergone;
			endif;
		endif;

endstate;

state towergone;
	code	

		//My tower is dead so I should stop attacking things.
		SetTargetDesirability(me,-1);
        SetSensorVisibility(me,false);
        SetAlignment(me,neutral);
        OrderStopAttacking;
		
		trans deadstate;	
	
endstate;


endfsm.
//******************************************************************

