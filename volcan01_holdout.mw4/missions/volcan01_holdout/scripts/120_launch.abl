
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!
//------------------------------------------------------------------

fsm launch : integer;


//------------------------------------------------------------------
// Launch:
//   This is for the ICBMs to take off into the stratosphere
//------------------------------------------------------------------



//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		static integer			attackRange;		// At what range do I start attacking?
		static integer			withdrawRange;		// At what range do I withdraw from combat?
		static integer			groupNumber;		// What's my group -- i.e. I will use GroupObjectID(groupNumber) to identify my group
		static integer			speed;				// The speed at which I move along the path
		static integer			formationType;		// What kind of formation am I in?
		static integer			formationDensity;	// How densely are we packed?
		static integer			path;				// My path
		static integer			moveType;			// How I move along the path

		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle

 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?
		static integer			findTypes;			// What kind of enemies to look for

		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		
		static integer			mood;				// My default mood.

		static integer			takeOffDistance;	// My take-off distance if I'm an airplane (ignored if not an airplane)
        static locpoint         mynav;              // Where I started from
        static boolean          teleported;         // Back on the map
        static integer          delay;              // They don't all take off at once
        static boolean          goboom;             // The rocket explodes on the launch pad

//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		attackRange		= 500;
		withdrawRange	= attackRange * 3 / 2;
		groupNumber		= 0;
		path			= -1;
		moveType		= move_nocycle;
		speed			= 150;
		formationType	= 1;
		formationDensity= formtype_sparse;
		takeOffDistance	= 150;

		// driver settings
		piloting		= 70;
		gunnery			= 120;
		minDelay		= 0.3;
		maxDelay		= 0.6;
		eliteLevel		= 90;
		attackThrottle	= 90;
		isShotRadius	= 120;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= NEUTRAL_START;
		findTypes		= FT_DEFAULT;

		switch (GetMemoryInteger(me,9))
        
            case 1:
                delay           = 2;
            endcase;

            case 2:
                delay           = 3 + random(2);
            endcase;

            case 3:
                delay           = 7;
            endcase;

            case 4:
                delay           = 5 + random(2);
            endcase;

            case 5:
                delay           = 2 + random(2);
            endcase;

            case 6:
                delay           = 13;
                goboom          = true;
            endcase;

            case 7:
                delay           = 17;    // was 7 before scene change
                //delay           = 23;     // test effect
                //goboom          = true;   // test effect
            endcase;

        endswitch;

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetEntropyMood			(ME,mood);
		SetCurMood				(ME,mood);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle		(ME,attackThrottle);

        //GetLocation(me,mynav);
        //Teleporttohell(me);
        trans holding;

endstate;

state holding;
    code

        if (goboom) then
            if (timegreater(13,8)) then
            //if (timegreater(13,12)) then // to test an effect
                destroy(me);
                trans deadstate;
            endif;
        endif;

        if (timegreater(13,delay)) then
            /* if (getmemoryinteger(me,9)==1) then
                trans flybird;
            endif; */

            if (orderTakeOff(800) == true) then
    			//trans FollowPathState;
    		endif;
        endif;
        
endstate;

state flybird;
    code

        if (timegreater(13,8)) then
            OrderMoveToObject(ena_travelpoint,100);
        endif;
    
endstate;

//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
                
        OrderMoveToObject(ena_Nav_Beta,200);
        
        If (OrderMoveToObject(ena_Nav_Beta,200)) then
            OnSite = true;
            SetAlignment(ebu_Tactical_Computer_Facility,friendly);
            if (not obj4revealed) then
                OrderLand;
            else
                if (orderTakeOff(takeOffDistance) == true) then
        			trans bugging;
        		endif;
            endif;
        endif;
        
endstate;

state bugging;
    code
    
    OrderMoveToObject(ena_bugout,200);
    
endstate;

//------------------------------------------------------------------
//	AttackState: attack my target
//------------------------------------------------------------------

state AttackState;
	code
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans FollowPathState;
		endif;

		if (attackSound <> -1) then	
			PlaySoundOnce(attackSound);
		endif;

		OrderAttack(true);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.

