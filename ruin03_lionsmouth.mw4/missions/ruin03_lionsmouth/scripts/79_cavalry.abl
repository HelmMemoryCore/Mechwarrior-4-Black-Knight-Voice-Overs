
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!
//------------------------------------------------------------------

fsm cavalry : integer;


//------------------------------------------------------------------
// Cavalry:
//   The enemy assault Mechs to reinforce the Base
//------------------------------------------------------------------



//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
    
    // Standard Mech and Vehicle variables
        static integer			attackRange;		// At what range do I start shooting?
		static integer			withdrawRange;		// At what range do I withdraw from combat completely?
                                                    //
		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle
		static integer			findTypes;			// What kind of enemies to look for
        static integer			path;	            // What path to take.
        static integer			speed;	            // Speed on the path.
                                                    //
 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?
                                                    //
		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		                                            //
		static integer			mood;				// My default 
		static integer			takeOffDistance;	// My take-off distance if I'm an airplane (ignored if not an airplane)
    //
		
        static integer			groupNumber;		// What's my group -- i.e. I will use GroupObjectID(groupNumber) to identify my group
		static integer			formationType;		// What kind of formation am I in?
		static integer			formationDensity;	// How densely are we packed?
		static integer			moveType;			// How I move along the path
        static locpoint         mynav;              // Where I teleport to

//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		attackRange		= 700;
		withdrawRange	= attackRange * 3 / 2;
		groupNumber		= 0;
		path			= epa_reinforcement;
		moveType		= move_circle;
		speed			= 70;
		formationType	= 1;
		formationDensity= formtype_sparse;
		takeOffDistance	= 150;

		// driver settings
		piloting		= 70;
		gunnery			= 90;
		minDelay		= 0.3;
		maxDelay		= 0.6;
		eliteLevel		= 50;
		attackThrottle	= 90;
		isShotRadius	= 120;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= BRUTAL_START; // was NEUTRAL_START;
		findTypes		= FT_DEFAULT;

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetEntropyMood			(ME,mood);
		SetCurMood				(ME,mood);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle		(ME,attackThrottle);

        GetLocation(me,mynav);
        TeleportToHell(me);

		trans Lobby;
        
endstate;

state Lobby;
    code
        
        if (EnterTheEnemy) then     // This value is triggered in the main script
            Teleport(me,mynav);
            Startup(me);
            trans FollowPathState;
        endif;

endstate;

//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
		if (FindEnemy(attackRange,findTypes)) then
			trans AttackState;
		endif;

		if (path <> -1) then
            if (OrderMoveTo(path,speed,move_nocycle,false,false)==true) then
                trans GoToPlayer;
            endif;
        else
		    OrderMoveLookOut;
        endif;
        
endstate;

//------------------------------------------------------------------
//	AttackState: attack my target
//------------------------------------------------------------------

state AttackState;
	code
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans GoToPlayer;
		endif;

		if (attackSound <> -1) then	
			PlaySoundOnce(attackSound);
		endif;

		OrderAttack(true);

endstate;

//------------------------------------------------------------------
//	Gotoplayer: Run Over to the Player
//------------------------------------------------------------------

state Gotoplayer;
	code

        if (FindEnemy(attackRange,findTypes)) then
			trans AttackState;
		endif;

		ordermovetoobject(playermech,600);
		
endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.

