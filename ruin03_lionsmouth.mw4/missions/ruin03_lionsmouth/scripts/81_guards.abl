
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!
//------------------------------------------------------------------

fsm guards : integer;

//------------------------------------------------------------------
// Guards:
//   These are the vehicles that guard the Mech Base
//------------------------------------------------------------------


//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		
    // Standard Mech and Vehicle variables
		static integer			TakeOffDistance;	// My take-off distance if I'm an airplane (ignored if not an airplane)
        static integer			AttackRange;		// At what range do I start shooting?
		static integer			WithdrawRange;		// At what range do I withdraw from combat completely?
                                                    //
		static integer			AttackThrottle;		// My attack throttle
		static integer			FindTypes;			// What kind of enemies to look for
		static integer			Piloting;			// Piloting skill
		static integer			Gunnery;			// Gunnery skill/chance to hit
		static real				MinDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				MaxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			EliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													//   and other things.  It indicates a general level of combat experience.
        static integer			Path;	            // What path to take.
        static integer			Speed;	            // Speed on the path.
		static integer			FormationType;		// What kind of formation am I in?
		static integer			FormationDensity;	// How densely are we packed?
		static integer			MoveType;			// How I move along the path
                                                    //
 		static integer			IsShotRadius;		// How far away from me will I detect an enemy shot?
                                                    //
		static integer 			AttackSound;		// The attack sound I play when I first attack
		static integer 			DeathSound;			// The sound I play when I die
		                                            //
		static integer			Mood;				// My default 
    //

//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		attackRange		= 500;
		withdrawRange	= attackRange * 3 / 2;
		path			= -1;
		moveType		= move_nocycle;
		speed			= 50;
		formationType	= 1;
		formationDensity= formtype_sparse;
		takeOffDistance	= 150;

		// driver settings
		piloting		= 70;
		gunnery			= 90;
		minDelay		= 0.3;
		maxDelay		= 0.6;
		eliteLevel		= 40;
		attackThrottle	= 90;
		isShotRadius	= 120;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= NEUTRAL_START;
		findTypes		= FT_DEFAULT;

//      if (getmemoryinteger(me,9)==1) then
//          path = epa_EnemyConvoyPath
//      endif;

endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetEntropyMood			(ME,mood);
		SetCurMood				(ME,mood);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle		(ME,attackThrottle);

		if (orderTakeOff(takeOffDistance) == true) then
			trans FollowPathState;
		endif;
        
endstate;

//------------------------------------------------------------------
//	FollowPathState: follow our path, but keep an eye out for enemies
//------------------------------------------------------------------

state FollowPathState;
	code
		if (FindEnemy(attackRange,findTypes)) then
			trans AttackState;
		endif;

		if (path <> -1) then
            OrderMoveTo(path,speed,move_nocycle,false,false);
        else
		    OrderMoveLookOut;
        endif;
        
endstate;

//------------------------------------------------------------------
//	AttackState: attack my target
//------------------------------------------------------------------

state AttackState;
	code
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans FollowPathState;
		endif;

		if (attackSound <> -1) then	
			PlaySoundOnce(attackSound);
		endif;

		OrderAttack(true);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.

