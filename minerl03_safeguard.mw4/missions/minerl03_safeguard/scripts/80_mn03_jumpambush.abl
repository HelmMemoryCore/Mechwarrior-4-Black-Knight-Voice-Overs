
//*********************************************************************************
//The below line MUST be changed in order for the script to be considered
//a unique entity.  The word Sentry must be changed to some other unique identifier
fsm Mn03_JumpAmbush : integer;
		


// 		Behavior: Sits stationary and looks around. When an enemy comes within
//  	alertrange it moves towards the unit
//		When the unit comes within attackrange it attacks
//		When it kills the unit it can either go back to it's start point or not,
//		depending on different settings in the brain.


//------------------------------------------------------------------
//
//     Constant Definitions
//
//------------------------------------------------------------------
	const
		#include_ <content\ABLScripts\mwconst.abi>


//------------------------------------------------------------------
//
//     Type Definitions
//
//------------------------------------------------------------------
	type
		#include_ <content\ABLScripts\mwtype.abi>
	

//------------------------------------------------------------------
//
//     Variable Declarations
//
//------------------------------------------------------------------
	var
	static integer			AttackRange; 			// When do I start shooting?
	static integer			BreakAttackRange; 		// At what range do I stop the Ambush Tatic?	
	static integer			FallbackToPosition;		//Used to "step" the locations the unit should "fallbackto"
	static integer 			FallbackLocation;		// The current Fallback Location that the unit should go to
	static integer			PathPoint1;				//Actual Pathpoints for Fallback positions
	static integer			PathPoint2;
	static integer			piloting; 				// piloting skill (1-5),
	static integer			gunnery; 				// hit chance,
	static real				mindelay;				//minimum amount of time I will wait between shots once a weapon is reloaded
	static real				maxdelay;				//maximum amount of time I will wait between shots once a weapon is reloaded
	static integer 			speed;			 		// What speed so I move at?
	static integer 			elitelevel; 			// % elite chance, This helps determine tactics, defensive manuevers, opportunity fire
													// and other things that would normally be determined by combat experience
  static integer			isshotradius;			//how far away from me will I detect an enemy shot.
  static integer			mood;					//What is my normal mood?
  static Boolean 			attacksoundplayed;		//Am I attacking?
											//if set to -1 the below sounds effectively do not exist
	static integer 			attacksound; 			// plays when the unit first attacks
	static integer 			deathsound; 			// plays when the unit dies
	static boolean			derail;
 // static locpoint			mystart; 				//Where was the unit when the mission started
 //	static boolean			movetostart;			//should the unit move back to it's start point when it's done fighting?
	static objectid			whoIshooting;	
	static integer			takeOffDistance;	    // My take-off distance if I'm an airplane (ignored if not an airplane)
	static Boolean			MyTrigger;				// What Global Boolean Sets me off?
//------------------------------------------------------------------
//
//     Local Functions
//
//------------------------------------------------------------------

function init;
	code
																				
	//These variables should not be changed by the designer without good reason
	FallbackToPosition 		= 0;						//Init the Stepping varable
	Attacksoundplayed 		= FALSE;					//false
	Derail 					= false;
	whoIshooting 			= 0;
		
	Piloting 				= 70;						//3
	gunnery 				= 60;						//was 8/19 75
	mindelay				= 0.1;						//1.5
	maxdelay				= 0.3;						//3.0
	elitelevel 			    = 60;						//was 8/19 72

  //These are the variables that are normally changed by the designer
  //in order to change behavior
  //Use this to set different values for different units using the same brain
														// defaults are below

	switch (GetMemoryInteger(me,9))

		case 25:
		
			attackrange 			= 750;				//was 450
			BreakAttackRange 		= 300;
			PathPoint1 				= epa_Path_JumpAmbushFall1;
			PathPoint2 				= epa_Path_JumpAmbushFall2;
			FallbackLocation 		= PathPoint1;
			speed 					= 600;				//600 (max speed)
			isshotradius 			= 80;				//80	
			attacksound 			= -1;               //-1 (no sound)
			deathsound 				= -1;               //-1 (no sound)	
			mood 					= neutral_start;	//neutral_start
			FallbackToPosition 	    = 0;
			Attacksoundplayed 	    = TRUE;
			myTrigger				= NavBReached;
		
		endcase;

/*
		case 28:							//still using the Airborne Script
		
			attackrange 			= 450;
			BreakAttackRange 		= 300;
			PathPoint1 				= epa_Path_PopCoptFall1;
			PathPoint2 				= epa_Path_PopCoptFall1;
			FallbackLocation 		= PathPoint1;
			speed 					= 600;						//600 (max speed)
			isshotradius 			= 80;						//80	
			attacksound 			= -1;              			//-1 (no sound)
			deathsound 				= -1;              			//-1 (no sound)	
			mood 					= neutral_start;			//neutral_start
			FallbackToPosition 	    = 0;
			Attacksoundplayed 	    = TRUE;
			takeOffDistance			= 150;
			MyTrigger				= Objective1Win;
			
		endcase;
*/		
		case 60:
		
			attackrange 			= 750;			    //was 450
			BreakAttackRange 		= 300;
			PathPoint1 				= epa_Path_JumpGammaFall1;
			PathPoint2 				= epa_Path_JumpGammaFall2;
			FallbackLocation 		= PathPoint1;
			speed 					= 600;				//600 (max speed)
			isshotradius 			= 80;				//80	
			attacksound 			= -1;              	//-1 (no sound)
			deathsound 				= -1;              	//-1 (no sound)	
			mood 					= neutral_start;	//neutral_start
			FallbackToPosition 	    = 0;
			Attacksoundplayed 	    = TRUE;
			myTrigger				= NavDReached;
			
		endcase;

/*
		case 88:
		
			attackrange 			= 450;                                             
			BreakAttackRange 		= 300;                                             
			PathPoint1 				= epa_Path_PopCoptFall1;                           
			PathPoint2 				= epa_Path_PopCoptFall1;                           
			FallbackLocation 		= PathPoint1;                                      
			speed 					= 600;                      //600 (max speed)      
			isshotradius 			= 80;                       //80                   
			attacksound 			= -1;                       //-1 (no sound)        
			deathsound 				= -1;                       //-1 (no sound)        
			mood 					= neutral_start;            //neutral_start        
			FallbackToPosition 	    = 0;                                               
			Attacksoundplayed 	    = TRUE;                                            
			takeOffDistance			= 150;                                             
			MyTrigger				= SneakyResponse;
			
		endcase;
*/

	endswitch;
	
endfunction;

//------------------------------------------------------------------
//
//     Main Code
//
//------------------------------------------------------------------
state startState;

	code
		SetFiringDelay(me,mindelay,maxdelay);
		setignorefriendlyfire(me,true);
		setisshotradius(me,isshotradius);
		setentropymood(me,mood);
		setcurmood(me,mood);
		setskilllevel(me,piloting,gunnery,elitelevel);
		//setsearchlight(me,on);
		//startexecute(me);
		//setalignment(me,enemy);
		
		shutdown(me);
		trans AlertState;
		
endstate;			

				
//------------------------------------------------------------------

state deadState;
  code
		if (deathsound <> -1) then	
			PlaySoundOnce(deathsound);
		endif;
		orderDie;
endstate;

state AlertState;
  code

if ((isshot(me)) or (iswithin(playermech,me,attackrange))) then
	startup(me);
	trans wait;
endif;

if (myTrigger == True) then
	startup(me);
	trans wait;
endif;

	switch (GetMemoryInteger(me,9))

		case 25:
			myTrigger						=	NavBReached;
		endcase;
		
		case 60:
			myTrigger						=	NavDReached;
		endcase;
	
	endswitch;
	
endstate;

				
//------------------------------------------------------------------
state Wait;
	code

	OrderMoveLookout;
						
		//find me an enemy
if (setmytarget(attackrange)) then
	attackrange = 1000; 						//Need to play with Attack Range = MT mn03
	
	if (fallbacklocation == -1) then
		orderstopattacking;				
		clearmoveorder(me);
		whoIshooting = gettarget(me);
		trans attack;
	else
		whoIshooting = gettarget(me);
		trans ambush;
	endif;
	
endif;
			
endstate;

//------------------------------------------------------------------
//
//     attack state : description
//
//------------------------------------------------------------------
state Ambush;

		
	code

	switch (GetMemoryInteger(me,9))

		case 25:
			if not ismusicplaying then
				StartMusic("Music\Push",0.0,3.0,50);
			endif;
		endcase;
		
		case 60:
			if not ismusicplaying then
				StartMusic("Music\Daggers",0.0,3.0,50);
			endif;
		endcase;
	
	endswitch;

if (orderTakeOff(takeOffDistance) == true) then	
		
		if (LeaveAttackState(attackrange*3/2)) then
			orderstopattacking;;				
			trans wait;
		endif;
		
		//Ambush with the Jump&Shoot Tactic
    OrderAttackTactic(TACTIC_JUMP_AND_SHOOT,true);		
endif;
		
		if ((isWithin(whoIshooting,me,BreakAttackRange) == True) or (TacticIsFinished(me))) then
			OrderStopAttacking;
			FallBackToPosition = FallBackToPosition + 1;
			
			switch (FallBacktoPosition)

				case 1:
					FallBackLocation = PathPoint1;
					derail = false;
        endcase;
		
				case 2:
					FallBackLocation = PathPoint2;
					derail = false;
        endcase;
	  	
				case 3:
					FallBackLocation = -1;
					attackrange = 1700;
					derail = true;
		GroupAddObject(GroupObjectId(80),me);
        endcase;

			endswitch;

			trans Fallback;	
    endif;
																	
	endstate;
	
state Attack;
		
	code

	if (orderTakeOff(takeOffDistance) == true) then	
		if (LeaveAttackState(attackrange*3/2)) then
			orderstopattacking;				
			trans wait;
		endif;
		
		// Pick the best
    OrderAttackTactic(TACTIC_PICK_BEST,true);		
	endif;
		
	endstate;

//------------------------------------------------------------------
//
//     Fallback state : description
//
//------------------------------------------------------------------
state Fallback;
	
	var
		ObjectID target;
		
	code
		
		//Decide where to fallbackto or if at final position attack				
		if (FallBackLocation <> -1) then
      if (OrderMoveto(FallbackLocation,speed,MOVE_NOCYCLE,true,false) == true) then
        OrderStopAttacking;
				shutdown(me);
				trans AlertState;
			endif;
		endif;		
		
		//find me an enemy
		if (GetTarget(me) == no_unit ) then
	 		setmytarget(attackrange);	
		else
			OrderAttack (derail);
    endif;
		
		if iswithin(me,playermech,450) then			//for bug 2260 -mt 8-30
			orderstopattacking;				
			clearmoveorder(me);
			setmytarget(attackrange);	
			trans attack;
		endif;
		
		
		if (NavEReached == TRUE) then
			orderMovetoObject(ena_Nav_Epsilon,speed);
 			
			if iswithin(me,ena_Nav_Epsilon,550) then
			orderstopattacking;				
			clearmoveorder(me);
				setmytarget(attackrange);	
				trans attack;
			endif;
		endif;
 	
endstate;
	
endfsm.
//******************************************************************

