
//------------------------------------------------------------------
// NOTE: The fsm name below MUST be changed in order for the
// script to be considered a unique entity!
//------------------------------------------------------------------

fsm firstwave : integer;


//------------------------------------------------------------------
// Generic_Sentry:
//   Stands still.  Moves to attack anything that comes near.
//
//------------------------------------------------------------------

//------------------------------------------------------------------
//     Constants
//------------------------------------------------------------------

	const
		#include_ <content\ABLScripts\mwconst.abi>

//------------------------------------------------------------------
//     Types
//------------------------------------------------------------------

	type
		#include_ <content\ABLScripts\mwtype.abi>

//------------------------------------------------------------------
//     Variables
//------------------------------------------------------------------

	var
		static integer			attackRange;		// At what range do I start shooting?
		static integer			withdrawRange;		// At what range do I withdraw from combat completely?

		static integer			piloting;			// Piloting skill
		static integer			gunnery;			// Gunnery skill/chance to hit
		static real				minDelay;			// Minimum amount of time I will wait between shots once a weapon is reloaded
		static real				maxDelay;			// Maximum amount of time I will wait between shots once a weapon is reloaded
		static integer 			eliteLevel;			// Elite level.  This helps determine tactics, defensive manuevers, opportunity fire
													// and other things.  It indicates a general level of combat experience.
		static integer			attackThrottle;		// My attack throttle
		static integer			findTypes;			// What kind of enemies to look for

 		static integer			isShotRadius;		// How far away from me will I detect an enemy shot?

		static integer 			attackSound;		// The attack sound I play when I first attack
		static integer 			deathSound;			// The sound I play when I die
		
		static integer			mood;				// My default mood.

		static integer			takeOffDistance;	// My take-off distance if I'm an airplane (ignored if not an airplane)
        static integer          groupnumber;
        static integer          path;
        static integer          speed;
        static integer          moveType;
        static integer          formationType;
        static integer          formationDensity;
                                        
//------------------------------------------------------------------
//     Init: my initialization function
//------------------------------------------------------------------

function Init;
	code
		// script-specific variables
		attackRange		= 700;
		withdrawRange	= attackRange * 3 / 2;
		takeOffDistance	= 150;

		// driver settings
		piloting		= 80;
		gunnery			= 60;
		minDelay		= 0.1;
		maxDelay		= 0.3;
		eliteLevel		= 40;
		attackThrottle	= 70;
		isShotRadius	= 120;
		attackSound		= -1; // no sound
		deathSound		= -1; // no sound
		mood			= NEUTRAL_START;
		//findTypes		= FT_DEFAULT;
        findTypes		= 3;

        // Path variables
        
        GroupNumber     = 22;
        Path            = epa_wavepath;
        Speed           = 80;
        moveType        = move_nocycle;
        formationType   = formation_line;
        formationDensity= formtype_dense;

    switch (getmemoryinteger(me,9))

	case 1:                     // Rebel pilots
		piloting		= 50;
		gunnery			= 30;
		minDelay		= 1.5;
		maxDelay		= 3.0;
		eliteLevel		= 30;
		attackThrottle	= 80;
 	endcase;
	
    endswitch;


endfunction;

//------------------------------------------------------------------
//	StartState: my initial state
//------------------------------------------------------------------

state StartState;

	code
		SetFiringDelay			(ME,minDelay,maxDelay);
		SetIgnoreFriendlyFire	(ME,true);
		SetIsShotRadius			(ME,isShotRadius);
		SetEntropyMood			(ME,mood);
		SetCurMood				(ME,mood);
		SetSkillLevel			(ME,piloting,gunnery,eliteLevel);
		SetAttackThrottle		(ME,attackThrottle);
				
		if (orderTakeOff(takeOffDistance) == true) then
			trans Shutd;
		endif;

endstate;


//------------------------------------------------------------------
//  The units stay shutdown until the players get near.
//------------------------------------------------------------------

state Shutd;
	code
		shutdown(me);

        if (IsWithin(playermech,me,1300)) then
            startup(me);
            trans WaitState;
        endif;
        
        if (IsWithin(GroupObjectId(2),ena_Nav_Gamma,300)) then
            startup(me);
            trans WaitState;
        endif;
        
endstate;                                                    
                          
                          
//------------------------------------------------------------------
//	WaitState: wait for something to shoot
//------------------------------------------------------------------

state WaitState;
	code
        
        // OrderFormationMove((groupobjectid(22)),epa_WavePath,speed,moveType,formationType,formationDensity,false);
        OrderFormationMove((groupobjectid(groupNumber)),path,speed,moveType,formationType,formationDensity,false);
        // OrderMoveLookOut;

		if (FindEnemy(attackRange,findTypes)) then
			trans AttackState;
		endif;		
endstate;

//------------------------------------------------------------------
//	AttackState: look for something to shoot
//------------------------------------------------------------------

state AttackState;
	code
		if (LeaveAttackState(withdrawRange)) then
			OrderStopAttacking;
			SetTarget(ME,NO_UNIT);
			trans WaitState;
		endif;

        SetTarget(ME,GetNearestEnemy(ME));

		OrderAttack(true);

endstate;

//------------------------------------------------------------------
//	DeadState: OK, I kicked the bucket.
//------------------------------------------------------------------

state DeadState;
	code
		if (deathSound <> -1) then	
			PlaySoundOnce(deathSound);
		endif;		

		orderDie;

endstate;


endfsm.

